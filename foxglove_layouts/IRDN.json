{
  "configById": {
    "3D!3xjkqnr": {
      "cameraState": {
        "perspective": true,
        "distance": 12.604988194489911,
        "phi": 25.23490027120541,
        "thetaOffset": 43.10055064585126,
        "targetOffset": [
          0,
          0,
          0
        ],
        "target": [
          0,
          0,
          0
        ],
        "targetOrientation": [
          0,
          0,
          0,
          1
        ],
        "fovy": 45,
        "near": 0.5,
        "far": 5000
      },
      "followMode": "follow-pose",
      "scene": {},
      "transforms": {},
      "topics": {
        "laser_scan": {
          "visible": true,
          "colorField": "range",
          "colorMode": "colormap",
          "colorMap": "turbo",
          "pointSize": 2
        },
        "pose": {
          "visible": true,
          "type": "arrow"
        }
      },
      "layers": {
        "grid": {
          "visible": true,
          "drawBehind": false,
          "frameLocked": true,
          "label": "Grid",
          "instanceId": "f836ad42-8d96-4033-bb1f-c85083a8b094",
          "layerId": "foxglove.Grid",
          "size": 10,
          "divisions": 10,
          "lineWidth": 1,
          "color": "#248eff",
          "position": [
            0,
            0,
            0
          ],
          "rotation": [
            0,
            0,
            0
          ]
        }
      },
      "publish": {
        "type": "point",
        "poseTopic": "/move_base_simple/goal",
        "pointTopic": "/clicked_point",
        "poseEstimateTopic": "/initialpose",
        "poseEstimateXDeviation": 0.5,
        "poseEstimateYDeviation": 0.5,
        "poseEstimateThetaDeviation": 0.26179939
      },
      "imageMode": {}
    },
    "Gauge!3bt5hs0": {
      "path": "speed.left",
      "minValue": 0,
      "maxValue": 2000,
      "colorMap": "red-yellow-green",
      "colorMode": "colormap",
      "gradient": [
        "#0000ff",
        "#ff00ff"
      ],
      "reverse": false,
      "reverseDirection": false
    },
    "Gauge!x7gn0i": {
      "path": "speed.right",
      "minValue": 0,
      "maxValue": 2000,
      "colorMap": "red-yellow-green",
      "colorMode": "colormap",
      "gradient": [
        "#0000ff",
        "#ff00ff"
      ],
      "reverse": false,
      "reverseDirection": false
    },
    "Plot!2by4ts5": {
      "paths": [
        {
          "timestampMethod": "receiveTime",
          "value": "speed.left",
          "enabled": true,
          "color": "#4e98e2",
          "showLine": true
        },
        {
          "timestampMethod": "receiveTime",
          "value": "speed.right",
          "enabled": true,
          "color": "#f5774d"
        }
      ],
      "showXAxisLabels": true,
      "showYAxisLabels": true,
      "showLegend": true,
      "legendDisplay": "floating",
      "showPlotValuesInLegend": false,
      "isSynced": true,
      "xAxisVal": "timestamp",
      "sidebarDimension": 240,
      "timeWindowMode": "sliding"
    },
    "RawMessages!29yhh9f": {
      "diffEnabled": false,
      "diffMethod": "custom",
      "diffTopicPath": "",
      "showFullMessageForDiff": false,
      "topicPath": "file",
      "fontSize": 12
    },
    "Indicator!2pnln5x": {
      "path": "brake.value",
      "style": "background",
      "fontSize": 36,
      "fallbackColor": "#13ff00",
      "fallbackLabel": "NO BRAKE",
      "rules": [
        {
          "operator": "=",
          "rawValue": "1",
          "color": "#e34b4b",
          "label": "BRAKE"
        }
      ]
    },
    "Indicator!3xggete": {
      "path": "direction.value",
      "style": "background",
      "fontSize": 36,
      "fallbackColor": "#00fbff",
      "fallbackLabel": "CCW",
      "rules": [
        {
          "operator": "=",
          "rawValue": "cw",
          "color": "#3340d2",
          "label": "CW"
        }
      ]
    },
    "Indicator!3b9raju": {
      "path": "horn.value",
      "style": "background",
      "fontSize": 36,
      "fallbackColor": "#ebf983",
      "fallbackLabel": "Horn ON",
      "rules": [
        {
          "operator": "=",
          "rawValue": "0",
          "color": "#82838a",
          "label": "Horn OFF"
        }
      ]
    },
    "StateTransitions!4awf2pm": {
      "paths": [
        {
          "value": "brake.value",
          "timestampMethod": "receiveTime",
          "customStates": {
            "type": "discrete",
            "states": []
          }
        },
        {
          "value": "direction.value",
          "timestampMethod": "receiveTime",
          "customStates": {
            "type": "discrete",
            "states": []
          }
        },
        {
          "value": "horn.value",
          "timestampMethod": "receiveTime",
          "customStates": {
            "type": "discrete",
            "states": []
          }
        }
      ],
      "isSynced": true,
      "timeWindowMode": "sliding",
      "playbackBarPosition": "right"
    },
    "Plot!23kdiq": {
      "paths": [
        {
          "timestampMethod": "receiveTime",
          "value": "brake.value",
          "enabled": true,
          "color": "#4e98e2"
        },
        {
          "timestampMethod": "receiveTime",
          "value": "horn.value",
          "enabled": true,
          "color": "#f5774d"
        }
      ],
      "showXAxisLabels": true,
      "showYAxisLabels": true,
      "showLegend": true,
      "legendDisplay": "floating",
      "showPlotValuesInLegend": false,
      "isSynced": true,
      "xAxisVal": "timestamp",
      "sidebarDimension": 240,
      "timeWindowMode": "fixed"
    }
  },
  "globalVariables": {},
  "userNodes": {
    "bdfd791a-8248-4d41-a3fa-6b32bb713418": {
      "sourceCode": "// The ./types module provides helper types for your Input events and messages.\nimport { Input, Message } from \"./types\";\n\n// Your script can output well-known message types, any of your custom message types, or\n// complete custom message types.\n//\n// Use `Message` to access types from the schemas defined in your data source:\n// type Twist = Message<\"geometry_msgs/Twist\">;\n//\n// Import from the @foxglove/schemas package to use foxglove schema types:\n// import { Pose, LocationFix } from \"@foxglove/schemas\";\n//\n// Conventionally, it's common to make a _type alias_ for your script's output type\n// and use that type name as the return type for your script function.\n// Here we've called the type `Output` but you can pick any type name.\ntype Output = {\n  hello: string;\n};\n\n// These are the topics your script \"subscribes\" to. Foxglove will invoke your script function\n// when any message is received on one of these topics.\nexport const inputs = [\"/input/topic\"];\n\n// Any output your script produces is \"published\" to this topic. Published messages are only visible within Foxglove, not to your original data source.\nexport const output = \"/foxglove_script/output_topic\";\n\n// This function is called with messages from your input topics.\n// The first argument is an event with the topic, receive time, and message.\n// Use the `Input<...>` helper to get the correct event type for your input topic messages.\nexport default function script(event: Input<\"/input/topic\">): Output {\n  return {\n    hello: \"world!\",\n  };\n};",
      "name": "bdfd791a"
    }
  },
  "playbackConfig": {
    "speed": 1
  },
  "layout": {
    "first": {
      "first": "3D!3xjkqnr",
      "second": {
        "first": {
          "first": "Gauge!3bt5hs0",
          "second": "Gauge!x7gn0i",
          "direction": "row"
        },
        "second": "Plot!2by4ts5",
        "direction": "column"
      },
      "direction": "column"
    },
    "second": {
      "first": {
        "first": "RawMessages!29yhh9f",
        "second": {
          "first": "Indicator!2pnln5x",
          "second": {
            "first": "Indicator!3xggete",
            "second": "Indicator!3b9raju",
            "direction": "row"
          },
          "direction": "row"
        },
        "direction": "column",
        "splitPercentage": 50.34496136374823
      },
      "second": {
        "first": "StateTransitions!4awf2pm",
        "second": "Plot!23kdiq",
        "direction": "column"
      },
      "direction": "column",
      "splitPercentage": 36.696340257171116
    },
    "direction": "row"
  }
}